name: CI Pipeline

on:
  push:
    branches:
      - main  # Déclenche l'action sur des pushs vers la branche principale
    tags:
      - '*'  # Déclenche l'action lors de la création de n'importe quel tag
  pull_request:
    branches:
      - main  # Déclenche l'action lors de la création d'une pull request vers la branche principale

jobs:
  install:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère le code du repository

      - name: Set up Node.js
        uses: actions/setup-node@v3  # Configure Node.js
        with:
          node-version: '16'  # Choix de la version de Node.js

      - name: Install dependencies
        run: npm ci --cache .npm --prefer-offline  # Utilise npm ci pour installer les dépendances avec un cache

  lint:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu pour l'étape de lint
    needs: install  # L'étape "lint" attend la fin de l'étape "install"
    if: ${{ github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère de nouveau le code du repository pour l'étape suivante

      - name: Lint code (ESLint)
        run: npm run lint  # Exécute la commande "npm run lint" définie dans package.json

  unit-test:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu pour l'étape de tests
    needs: install  # L'étape "unit-test" attend la fin de l'étape "install"
    if: ${{ github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère de nouveau le code du repository pour l'étape suivante

      - name: Run unit tests with Vitest
        run: npm test  # Exécute la commande "npm test" pour lancer les tests avec Vitest

  e2e-test:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu pour l'étape E2E
    if: ${{ github.event_name == 'pull_request' }}  # Ce job s'exécute uniquement pour les Pull Requests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère le code pour préparer le test

      - name: Run E2E test (placeholder)
        run: echo "Hello E2E !"  # Affiche "Hello E2E !" comme placeholder pour les tests E2E

  release:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu pour l'étape de release
    needs: [lint, unit-test]  # Cette étape attend la fin des étapes "lint" et "unit-test"
    if: ${{ github.ref == 'refs/heads/main' &&
            github.event.head_commit.message != null &&
            !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère le code pour préparer la release

      - name: Set up Node.js
        uses: actions/setup-node@v3  # Configure Node.js
        with:
          node-version: '16'  # Choix de la version de Node.js

      - name: Configure Git user
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "${{ github.actor }}"

      - name: Run release-it
        run: npx release-it --ci  # Exécute release-it en mode CI
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}  # Utilise le token GitHub pour effectuer la release

  only-canary:
    runs-on: ubuntu-latest  # Utilisation d'une machine virtuelle Ubuntu pour l'étape de validation
    needs: install  # Cette étape attend la fin de l'étape "install"
    if: ${{ env.ENV_TARGET == 'canary' }}  # Ce job ne s'exécute que si la variable ENV_TARGET est égale à "canary"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Récupère le code pour préparer le test

      - name: Run Only Canary Job
        run: echo "Hello Only Canary !"  # Affiche "Hello Only Canary !" comme placeholder pour ce job

    env:
      ENV_TARGET: ${{ secrets.ENV_TARGET }}  # Récupère la variable d'environnement ENV_TARGET depuis les secrets GitHub
